{"body":"###gc : Gifted Code from the Gudagi Web Interpreter\r\n\r\n\r\n### The dream: a _reactive_ server-client web that make sense and doesn't take all day to implement\r\n\r\nIf anything comes from this project, this is what the authors would like to see happen:\r\n\r\n* Smartly modular\r\n* Easy to Use\r\n* Both minimal and maximal: with wide and powerful configuration\r\n* Community-driven contributions\r\n* Worldwide adoption\r\n* Integration into w3 standards\r\n* More and more widgets\r\n\r\nIf you can contribute, please do.\r\n\r\n###Gudagi Web Interpreter (Open Source)\r\n\r\nGudagi Web Interpreter implements a C interpreter which converts \"GC markup\" into .php\r\nenabled web files, automatically including appropriate javascript and other ancillary\r\ncode that is useful for quickly building web functionality.\r\n\r\nLanguage overview: (currently hosted at Gudagi.com)\r\n[GC Help](http://gudagi.com/help)\r\n\r\nIn its current state, basic blogging, authentication, e-commerce and jQuery integration features are\r\nready.\r\n\r\nWhen looked at like a PHP utility function library, this package contains useful\r\nimplementations to simplify database integration.  \r\n\r\nWhen viewed as an interpreted website building language, GC is partially completed\r\nbut has the basic functionality which can be extended to your needs and improved by\r\nadding functionality unique to your client needs.  As you extend the language, you\r\nwill be encapsulating raw web functionality to re-use on other sites.\r\n\r\nAn example candidate addition to \"gc\" would be some compartmentalized functionality,\r\nsuch as a specific widget, which can be wrapped and programmed with GC.\r\n\r\nGC is essentially a configuration and data sourcing language, which provides simple\r\nmarkup and can be used to launch and re-launch both development and production\r\nsites effectively.\r\n\r\nOne work-flow would be to provide designers with a way to manipulate the underlying\r\nPHP using the GC language, in a way similar to ColdFusion but with less reliance\r\non query writing.  Your PHP developers would develop new GC objects using widgetry\r\nwrapped in a GC object (See /common/ directory which includes the packaged objects\r\nthat capture a broad range of web development topics).\r\n\r\n\r\n###Directory Setup\r\n\r\nGC sites are stored online, and a duplicate of the \"common\" directory sits off\r\nthe web root, /var/www/sites/common/ for instance, where sites are then deployed\r\nto unique folders inside /var/www/sites/ (ie: /var/www/sites/site0001 )\r\n\r\nYour databases should live in /sqlite/ (off the directory root) but this could\r\nbe moved or symlinked elsewhere to another offline area.\r\n\r\nA tmpfs (ramdisk) should be deployed at /instances/ which provides a fast\r\nplace for the interpreter to export data before it is moved to another location\r\nfor longer-term storage.\r\n\r\nThe GC interpreter (built with C) by default sits in /gc/ in the directory root,\r\nthough this directory can be changed to any other offline area.  The offline area\r\nprovides both security for the GC interpreter's core files, but also distinguishes\r\nit from other frameworks which rely solely on online code.\r\n\r\nThe interpreter takes .gc and .html/.htm files marked up with GC, that is then\r\ndeployed to a target online website directory.\r\n\r\n###Auth\r\n\r\nSince GC was written for a site deployment service, the structure of the database\r\nis provided in database.sql (included in the distribution) and uses a custom\r\nauthentication profile such that any user logged into the site is logged into\r\nany site deployed through GC.  This can be manipulated by making changes to the\r\nprovided custom authentication system.   Of note, the authentication method uses\r\nminimal client-side cookies and provides granular examination of usage.  However,\r\nit is not an all-encompassing implementation, and could be extended to include\r\nother metrics and usage tracking information.\r\n\r\nOther features either planned or implemented include:\r\n - ability for rapid deployment of UGC sites\r\n - ability for uploaded media to be stored in a centralized repository:\r\nthis is a part of the broader Gudagi project, which will open source the Gudagi Media Engine(tm), an associated tool that implements many of these\r\n  features and includes ffmpeg video transcoding, media cataloging, etc\r\n - ability for cross-site sharing of uploaded content\r\n  (for example sharing your royalty free content library with all of your customers)\r\n\r\n\r\nPossible future features or branches:\r\n - a visual tool for editing and creating content that deploys GC markup\r\n\r\n###SQLite and Scaling\r\n\r\nYou can easily scale SQLite, so this was chosen as the database system.  SQLite\r\nis also fast and reliable, and isn't bogged down by legacy features.  You could\r\ncertainly modify this aspect, but there is no switch between PDO database systems\r\nlike there are in other frameworks.  If you need to disperse SQLite across a\r\nnetworked file system, you can always find/invent a cataloging method to make\r\nindividual files smaller, and across a wider number of storage locations and\r\ndevices.\r\n\r\n###WIP notice\r\n\r\nThis code was never intended to be released to the public, so there are some rough edges and missing files, instructions and examples.  At some point in the future, this will be fixed.","tagline":"Gudagi Web Interpreter (Open Source)","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Gc","google":""}