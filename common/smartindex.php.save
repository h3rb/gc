<?php
class uagent_info // (c) 2010 Anthony Hand - Apache License 2.0
{
   var $useragent = "";
   var $httpaccept = "";
   var $true = 1;
   var $false = 0;
   var $isIphone = 0; //Stores whether the device is an iPhone or iPod Touch.
   var $isTierIphone = 0; //Stores whether is the iPhone tier of devices.
   var $isTierRichCss = 0; //Stores whether the device can probably support Rich CSS, but JavaScript support is not assumed. (e.g., newer BlackBerry, Windows Mobile)
   var $isTierGenericMobile = 0; //Stores whether it is another mobile device, which cannot be assumed to support CSS or JS (eg, older BlackBerry, RAZR)
   var $engineWebKit = 'webkit';
   var $deviceAndroid = 'android';
   var $deviceIphone = 'iphone';
   var $deviceIpod = 'ipod';
   var $deviceIpad = 'ipad';
   var $deviceMacPpc = 'macintosh'; //Used for disambiguation
   var $deviceNuvifone = 'nuvifone'; //Garmin Nuvifone
   var $deviceSymbian = 'symbian';
   var $deviceS60 = 'series60';
   var $deviceS70 = 'series70';
   var $deviceS80 = 'series80';
   var $deviceS90 = 'series90';
   var $deviceWinPhone7 = 'windows phone os 7'; 
   var $deviceWinMob = 'windows ce';
   var $deviceWindows = 'windows'; 
   var $deviceIeMob = 'iemobile';
   var $devicePpc = 'ppc'; //Stands for PocketPC
   var $enginePie = 'wm5 pie'; //An old Windows Mobile
   var $deviceBB = 'blackberry';   
   var $vndRIM = 'vnd.rim'; //Detectable when BB devices emulate IE or Firefox
   var $deviceBBStorm = 'blackberry95';  //Storm 1 and 2
   var $deviceBBBold = 'blackberry97'; //Bold
   var $deviceBBTour = 'blackberry96'; //Tour
   var $deviceBBCurve = 'blackberry89'; //Curve2
   var $deviceBBTorch = 'blackberry 98'; //Torch
   var $devicePalm = 'palm';
   var $deviceWebOS = 'webos'; //For Palm's new WebOS devices
   var $engineBlazer = 'blazer'; //Old Palm browser
   var $engineXiino = 'xiino'; //Another old Palm
   var $deviceKindle = 'kindle'; //Amazon Kindle, eInk one.
   var $vndwap = 'vnd.wap';
   var $wml = 'wml';   
   var $deviceBrew = 'brew';
   var $deviceDanger = 'danger';
   var $deviceHiptop = 'hiptop';
   var $devicePlaystation = 'playstation';
   var $deviceNintendoDs = 'nitro';
   var $deviceNintendo = 'nintendo';
   var $deviceWii = 'wii';
   var $deviceXbox = 'xbox';
   var $deviceArchos = 'archos';
   var $engineOpera = 'opera'; //Popular browser
   var $engineNetfront = 'netfront'; //Common embedded OS browser
   var $engineUpBrowser = 'up.browser'; //common on some phones
   var $engineOpenWeb = 'openweb'; //Transcoding by OpenWave server
   var $deviceMidp = 'midp'; //a mobile Java technology
   var $uplink = 'up.link';
   var $engineTelecaQ = 'teleca q'; //a modern feature phone browser
   var $devicePda = 'pda'; //some devices report themselves as PDAs
   var $mini = 'mini';  //Some mobile browsers put 'mini' in their names.
   var $mobile = 'mobile'; //Some mobile browsers put 'mobile' in their user agent strings.
   var $mobi = 'mobi'; //Some mobile browsers put 'mobi' in their user agent strings.
   var $maemo = 'maemo';
   var $maemoTablet = 'tablet';
   var $linux = 'linux';
   var $qtembedded = 'qt embedded'; //for Sony Mylo and others
   var $mylocom2 = 'com2'; //for Sony Mylo also
   var $manuSonyEricsson = "sonyericsson";
   var $manuericsson = "ericsson";
   var $manuSamsung1 = "sec-sgh";
   var $manuSony = "sony";
   var $manuHtc = "htc"; //Popular Android and WinMo manufacturer
   var $svcDocomo = "docomo";
   var $svcKddi = "kddi";
   var $svcVodafone = "vodafone";
   var $disUpdate = "update"; //pda vs. update
   function uagent_info()
   { 
       $this->useragent = strtolower($_SERVER['HTTP_USER_AGENT']);
       $this->httpaccept = strtolower($_SERVER['HTTP_ACCEPT']);
   }
   function InitDeviceScan()
   {
        global $isIphone, $isTierIphone, $isTierRichCss, $isTierGenericMobile;
        $this->isIphone = $this->DetectIphoneOrIpod();
        $this->isTierIphone = $this->DetectTierIphone();
        $this->isTierRichCss = $this->DetectTierRichCss();
        $this->isTierGenericMobile = $this->DetectTierOtherPhones();
   }
   function Get_Uagent()
   { 
       return $this->useragent;
   }
   function Get_HttpAccept()
   { 
       return $this->httpaccept;
   }
   function DetectIphone()
   {
      if (stripos($this->useragent, $this->deviceIphone) > -1)
      {
         if ($this->DetectIpad() == $this->true ||
             $this->DetectIpod() == $this->true)
         {
            return $this->false;
         }
         else
            return $this->true; 
      }
      else
         return $this->false; 
   }
   function DetectIpod()
   {
      if (stripos($this->useragent, $this->deviceIpod) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectIpad()
   {
      if (stripos($this->useragent, $this->deviceIpad) > -1 &&
          $this->DetectWebkit() == $this->true)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectIphoneOrIpod()
   {
       if (stripos($this->useragent, $this->deviceIphone) > -1 ||
           stripos($this->useragent, $this->deviceIpod) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectAndroid()
   {
      if (stripos($this->useragent, $this->deviceAndroid) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectAndroidWebKit()
   {
      if ($this->DetectAndroid() == $this->true)
      {
         if ($this->DetectWebkit() == $this->true)
         {
            return $this->true; 
         }
         else
            return $this->false; 
      }
      else
         return $this->false; 
   }
   function DetectWebkit()
   {
      if (stripos($this->useragent, $this->engineWebKit) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectS60OssBrowser()
   {
      //First, test for WebKit, then make sure it's either Symbian or S60.
      if ($this->DetectWebkit() == $this->true)
      {
        if (stripos($this->useragent, $this->deviceSymbian) > -1 ||
            stripos($this->useragent, $this->deviceS60) > -1)
        {
           return $this->true;
        }
        else
           return $this->false; 
      }
      else
         return $this->false; 
   }
   function DetectSymbianOS()
   {
       if (stripos($this->useragent, $this->deviceSymbian) > -1 || 
           stripos($this->useragent, $this->deviceS60) > -1 ||
           stripos($this->useragent, $this->deviceS70) > -1 || 
           stripos($this->useragent, $this->deviceS80) > -1 ||
           stripos($this->useragent, $this->deviceS90) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectWindowsPhone7()
   {
      if (stripos($this->useragent, $this->deviceWinPhone7) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectWindowsMobile()
   {
      if ($this->DetectWindowsPhone7() == $this->true)
         return $this->false; 
      if (stripos($this->useragent, $this->deviceWinMob) > -1 ||
          stripos($this->useragent, $this->deviceIeMob) > -1 ||
          stripos($this->useragent, $this->enginePie) > -1)
         return $this->true; 
	  if (stripos($this->useragent, $this->devicePpc) > -1
		  && !(stripos($this->useragent, $this->deviceMacPpc) > 1))
         return $this->true; 
      if (stripos($this->useragent, $this->manuHtc) > -1 &&
          stripos($this->useragent, $this->deviceWindows) > -1)
         return $this->true; 
      if ($this->DetectWapWml() == $this->true &&
          stripos($this->useragent, $this->deviceWindows) > -1) 
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectBlackBerry()
   {
       if (stripos($this->useragent, $this->deviceBB) > -1)
         return $this->true; 
       if (stripos($this->httpaccept, $this->vndRIM) > -1)
         return $this->true; 
       else
         return $this->false; 
   }
   function DetectBlackBerryWebKit()
   {
      if ((stripos($this->useragent, $this->deviceBB) > -1) &&
		(stripos($this->useragent, $this->engineWebKit) > -1))
      {
         return $this->true; 
      }
      else
        return $this->false; 
   }
   function DetectBlackBerryTouch()
   {
       if ((stripos($this->useragent, $this->deviceBBStorm) > -1) ||
		(stripos($this->useragent, $this->deviceBBTorch) > -1))
         return $this->true; 
       else
         return $this->false; 
   }
   function DetectBlackBerryHigh()
   {
      if ($this->DetectBlackBerryWebKit() == $this->true)
         return $this->false; 
      if ($this->DetectBlackBerry() == $this->true)
      {
          if (($this->DetectBlackBerryTouch() == $this->true) ||
            stripos($this->useragent, $this->deviceBBBold) > -1 ||
            stripos($this->useragent, $this->deviceBBTour) > -1 ||
            stripos($this->useragent, $this->deviceBBCurve) > -1)
          {
             return $this->true; 
          }
          else
            return $this->false; 
      }
      else
        return $this->false; 
   }
   function DetectBlackBerryLow()
   {
      if ($this->DetectBlackBerry() == $this->true)
      {
          if ($this->DetectBlackBerryHigh() == $this->true)
             return $this->false; 
          else
            return $this->true; 
      }
      else
        return $this->false; 
   }
   function DetectPalmOS()
   {
      if (stripos($this->useragent, $this->devicePalm) > -1 ||
          stripos($this->useragent, $this->engineBlazer) > -1 ||
          stripos($this->useragent, $this->engineXiino) > -1)
      {
         if ($this->DetectPalmWebOS() == $this->true)
            return $this->false;
         else
            return $this->true; 
      }
      else
         return $this->false; 
   }
   function DetectPalmWebOS()
   {
      if (stripos($this->useragent, $this->deviceWebOS) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectGarminNuvifone()
   {
      if (stripos($this->useragent, $this->deviceNuvifone) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectSmartphone()
   {
      if ($this->DetectIphoneOrIpod() == $this->true) 
         return $this->true; 
      if ($this->DetectS60OssBrowser() == $this->true)
         return $this->true; 
      if ($this->DetectSymbianOS() == $this->true) 
         return $this->true; 
      if ($this->DetectAndroid() == $this->true)
         return $this->true; 
      if ($this->DetectWindowsMobile() == $this->true)
         return $this->true; 
      if ($this->DetectWindowsPhone7() == $this->true)
         return $this->true; 
      if ($this->DetectBlackBerry() == $this->true)
         return $this->true; 
      if ($this->DetectPalmWebOS() == $this->true)
         return $this->true; 
      if ($this->DetectPalmOS() == $this->true)
         return $this->true; 
      if ($this->DetectGarminNuvifone() == $this->true)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectBrewDevice()
   {
       if (stripos($this->useragent, $this->deviceBrew) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectDangerHiptop()
   {
      if (stripos($this->useragent, $this->deviceDanger) > -1 ||
          stripos($this->useragent, $this->deviceHiptop) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectOperaMobile()
   {
      if (stripos($this->useragent, $this->engineOpera) > -1)
      {
         if ((stripos($this->useragent, $this->mini) > -1) ||
          (stripos($this->useragent, $this->mobi) > -1))
            return $this->true; 
         else
            return $this->false; 
      }
      else
         return $this->false; 
   }
   function DetectWapWml()
   {
       if (stripos($this->httpaccept, $this->vndwap) > -1 ||
           stripos($this->httpaccept, $this->wml) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectKindle()
   {
      if (stripos($this->useragent, $this->deviceKindle) > -1)
         return $this->true; 
      else
         return $this->false; 
   }
   function DetectMobileQuick() { if ($this->DetectiPad() == $this->true) return $this->false; if ($this->DetectSmartphone() == $this->true) return $this->true; if ($this->DetectWapWml() == $this->true) return $this->true; if ($this->DetectBrewDevice() == $this->true) return $this->true; if ($this->DetectOperaMobile() == $this->true) return $this->true; if (stripos($this->useragent, $this->engineNetfront) > -1) return $this->true; if (stripos($this->useragent, $this->engineUpBrowser) > -1) return $this->true; if (stripos($this->useragent, $this->engineOpenWeb) > -1) return $this->true; if ($this->DetectDangerHiptop() == $this->true) return $this->true; if ($this->DetectMidpCapable() == $this->true) return $this->true; if ($this->DetectMaemoTablet() == $this->true) return $this->true; if ($this->DetectArchos() == $this->true) return $this->true; if ((stripos($this->useragent, $this->devicePda) > -1) && (stripos($this->useragent, $this->disUpdate) < 0)) return $this->true; if (stripos($this->useragent, $this->mobile) > -1)         return $this->true; 
      else
         return $this->false; 
   }
   function DetectSonyPlaystation() { if (stripos($this->useragent, $this->devicePlaystation) > -1) return $this->true; else return $this->false; }
   function DetectNintendo() { if (stripos($this->useragent, $this->deviceNintendo) > -1 || stripos($this->useragent, $this->deviceWii) > -1 || stripos($this->useragent, $this->deviceNintendoDs) > -1) return $this->true; else return $this->false; }
   function DetectXbox() { if (stripos($this->useragent, $this->deviceXbox) > -1) return $this->true; else return $this->false; }
   function DetectGameConsole() { if ($this->DetectSonyPlaystation() == $this->true) return $this->true; else if ($this->DetectNintendo() == $this->true) return $this->true; else if ($this->DetectXbox() == $this->true) return $this->true; else return $this->false; }
   function DetectMidpCapable() { if (stripos($this->useragent, $this->deviceMidp) > -1 || stripos($this->httpaccept, $this->deviceMidp) > -1) return $this->true; else return $this->false; }
   function DetectMaemoTablet() { if (stripos($this->useragent, $this->maemo) > -1) return $this->true; if (stripos($this->useragent, $this->maemoTablet) > -1 && stripos($this->useragent, $this->linux) > -1) return $this->true; else return $this->false; }
   function DetectArchos() { if (stripos($this->useragent, $this->deviceArchos) > -1) return $this->true; else return $this->false; }
   function DetectSonyMylo() { if (stripos($this->useragent, $this->manuSony) > -1) { if ((stripos($this->useragent, $this->qtembedded) > -1) || (stripos($this->useragent, $this->mylocom2) > -1)) { return $this->true; } else return $this->false; } else return $this->false; }
   function DetectMobileLong() { if ($this->DetectMobileQuick() == $this->true) return $this->true; if ($this->DetectGameConsole() == $this->true) return $this->true; if ($this->DetectSonyMylo() == $this->true) return $this->true; if (stripos($this->useragent, $this->uplink) > -1) return $this->true; if (stripos($this->useragent, $this->manuSonyEricsson) > -1) return $this->true; if (stripos($this->useragent, $this->manuericsson) > -1) return $this->true; if (stripos($this->useragent, $this->manuSamsung1) > -1) return $this->true; if (stripos($this->useragent, $this->svcDocomo) > -1) return $this->true; if (stripos($this->useragent, $this->svcKddi) > -1) return $this->true; if (stripos($this->useragent, $this->svcVodafone) > -1) return $this->true; else return $this->false; }
   function DetectTierIphone() { if ($this->DetectIphoneOrIpod() == $this->true) return $this->true; if ($this->DetectAndroid() == $this->true) return $this->true; if ($this->DetectAndroidWebKit() == $this->true) return $this->true; if ($this->DetectWindowsPhone7() == $this->true) return $this->true; if ($this->DetectBlackBerryWebKit() == $this->true) return $this->true; if ($this->DetectPalmWebOS() == $this->true) return $this->true; if ($this->DetectGarminNuvifone() == $this->true) return $this->true; if ($this->DetectMaemoTablet() == $this->true) return $this->true; else return $this->false; }
   function DetectTierRichCss() { if ($this->DetectMobileQuick() == $this->true) { if ($this->DetectTierIphone() == $this->true) return $this->false; if ($this->DetectWebkit() == $this->true) return $this->true; if ($this->DetectS60OssBrowser() == $this->true) return $this->true; if ($this->DetectBlackBerryHigh() == $this->true) return $this->true; if ($this->DetectWindowsMobile() == $this->true) return $this->true; if (stripos($this->useragent, $this->engineTelecaQ) > -1) return $this->true; else return $this->false; } else return $this->false; }
   function DetectTierOtherPhones() { if ($this->DetectMobileLong() == $this->true) { if ($this->DetectTierIphone() == $this->true) return $this->false; if ($this->DetectTierRichCss() == $this->true) return $this->false; else return $this->true; } else return $this->false; }}

/// GC Smart Index:
$detector=new uagent_info();

